#
# ultimate extraction tool stuff
#
extract () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1        ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.tar.xz)    tar xvfJ $1     ;;
             *.bz2)       bunzip2 $1       ;;
             *.rar)       rar x $1     ;;
             *.gz)        gunzip $1     ;;
             *.tar)       tar xvf $1        ;;
             *.tbz2)      tar xvjf $1      ;;
             *.tgz)       tar xvzf $1       ;;
             *.zip)       unzip $1     ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

function psgrep () {
  ps aux | grep "$1" | grep -v "grep"
}

function mkcd () {
  mkdir -p "$1"
  cd "$1"
}
function cpbak () {
  cp "$1"{,.bak}
}

function f () {
  find . -iname "*$1*"
}

function google () {
  find . -iname "*$1*"
}

function psd () {
  ps auxwww | awk '$8 ~ /D/'
}
function psz () {
  ps auxwww | awk '$8 ~ /Z/'
}

function gcctest () {
  g++ *.cpp -o file
}

function evalssh () {
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/id_rsa_git
}

function knownhosts () {
  sed -i $1'd' ~/.ssh/known_hosts
}

function maketar() { 
  tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; 
}


function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
    if [[ -n "$@" ]]; then
      du $arg -- "$@";
    else
    du $arg .[^.]* ./*;
  fi;
}

function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}
function dd_hardwareinformation {
  if [ $HOSTTYPE = x86_64 ]; then
    arch="\033[32m64bit\033[0m"
  else
    arch="\033[31;1m32bit\033[0m"
  fi
  MACHTYPE=$(echo "${MACHTYPE:-unknown machine type}")
  vendorinfo="$(cat /proc/cpuinfo | grep -i "vendor" | head -n 1 | /usr/bin/cut -d ':' -f 2 | sed "s/ //g") $HOSTTYPE"
  cpuinfo="$(cat /proc/cpuinfo | grep -c "model name")x$(cat /proc/cpuinfo | grep -i "model name" | head -n 1 | /usr/bin/cut -d ':' -f 2 | sed "s/  //g") ($vendorinfo)"
  memtotal="$(($(cat /proc/meminfo | grep -i "memtotal" | /usr/bin/cut -d ':' -f 2 | sed "s/ //g" | /usr/bin/cut -d 'k' -f 1) / 1024))"
   memfree="$(($(cat /proc/meminfo | grep -i "memfree"  | /usr/bin/cut -d ':' -f 2 | sed "s/ //g" | /usr/bin/cut -d 'k' -f 1) / 1024))"
  memthres="$(echo "( $memfree / $memtotal) < 0.2" | bc -l)"
  raminfo="${memfree}MB of ${memtotal}MB"
  if [ $memthres -eq 1 ]; then raminfo="\033[31;1m$raminfo\033[0m"; fi
  users="$(who | cut -d' ' -f1 | sort | uniq | tr '\n' ' ')"
  uptime="$(uptime)"
  release="$(cat /etc/*release | grep '^NAME\|^VERSION=' | sed -r s/'(NAME=|VERSION=|\")'//g | tr '\n' ' ')"
  echo -e "\033[30;1m------------------------------------------------------------------------------\033[0m"
  echo -e "\033[34;1mCurrent Server  \033[30;1m  $HOSTNAME ($MACHTYPE)\033[0m"
  echo -e "\033[34;1mOperating System \033[30;1m $release"
  echo -e "\033[34;1mProcessor(s)    \033[30;1m  $cpuinfo\033[0m $arch"
  echo -e "\033[34;1mMemory used     \033[30;1m  $raminfo\033[0m"
  echo -e "\033[34;1mUptime          \033[30;1m $uptime\033[0m"
  echo -e "\033[34;1mUsers logged on \033[30;1m  $users\033[0m"
  echo -e "\033[34;1mYou belong to   \033[30;1m  $(groups)"
  quota=$(quota -s)
  qu=$(echo $quota | awk '{print $18}'); qus=${qu:(-1)}; qun=${qu:0:$(expr ${#qu} - 1)}
  qs=$(echo $quota | awk '{print $19}'); qss=${qs:(-1)}; qsn=${qs:0:$(expr ${#qs} - 1)}
  qh=$(echo $quota | awk '{print $20}'); qhs=${qh:(-1)}; qhn=${qh:0:$(expr ${#qh} - 1)}
  us=$(echo $quota | awk '{print $6}')
  qfrees=$(expr $qsn - $qun)
  qfreeh=$(expr $qhn - $qun)
  quotaalert=""
  echo -e "\033[34;1mQUOTA            \033[30;1m usage:${qu}B soft:${qs}B hard:${qh}B"
  echo -e "\033[34;1mFREE             \033[30;1m soft:${qfrees}${qss}B  hard:${qfreeh}${qhs}B \033[0m"
  echo -e "\033[30;1m------------------------------------------------------------------------------\033[0m"


}


function cporig() {
  cp $1{,.orig}
}
function mvorig() {
  mv $1{,.orig}
}

function vmfirefox() {
  vmware-view -s vvp.itwm.fhg.de -u daneker -p "$(pass main/windows/daneker)" -a "Mozilla Firefox" -q 2> /dev/null
}
function vmword() {
  vmware-view -s vvp.itwm.fhg.de -u daneker -p "$(pass main/windows/daneker)" -a "Microsoft Word" -q 2> /dev/null
}
